// When building an application ranging from small to medium sized, we plan it with the following steps.

/*

1.) User stories - A description of the apps functionalities from the users perspective. Every user application combined, describes the application in its entirety

2.) Features - All features we need to implement in order to match up with the user stories

3.) Flowchart - A flowchart to explain each and every feature we need to integrate into the app

4.) Architecture - How we will organize our code and what javascript features we will use within our project. This essensially holds all of our code together.

5.) ----- DEVELOPMENT -----

---

---

---

------------------------- USER STORIES -------------------------

`As a [type of user], I want to [an action] so that I can [benefit]` WHO - WHAT - WHY

                    ----- USER STORY 1 -----

1.) As a [runner], I want [to log my running workout with location, time, pace and steps/minute], so that I can [keep a log of all my running].

                     ----- USER STORY 2 -----

2.) As a [cyclist], I want to [log my cycling workouts with location, time, speed and elevation gain], so I can [log all of my cycling]

                    ----- USER STORY 3 -----

3.) As a [user] I want to [see all of my workout at a glance], so I can [easily track my progress over time]

                    ----- USER STORY 4 -----

4.) As a [user] I want to [see all of my workouts on a map], so that I can [easily check where I work out the most]

                    ----- USER STORY 5 -----

5.) As a [user] I want to [see all of my workouts when I leave and come back later], so that I [can keep using the app over time]

--------------------------- Features ---------------------------

1.) Map that a user can click on in order to add a new workout location.
2.) Geolocation in order to display map at current location ( so that user doesn't have to scroll to their location)
3.) Form to input the rest of the data (distance, time, pace, steps per minute)
4.) Form to input distance, time, speed, elevation gain
5.) Display all workouts in a list
6.) Display all workouts on the map as well
7.) Store workout data in the browser via local storage API
8.) When the page loads, read the saved data from the API and display that data

We don't always have to have a perfect flowchart right from the start, we can create a base and then work on it as we go along and program more and more

In order to use a custom API, we have to first import the script and links to the HTML file. We then have to grab the functionality (functions) that are linked and included with the scripts we downloaded.

Any variable that is in the global context, will be available to any script that is connected with the html document. The script containing the variables in the GEC that we are trying to access.

When listing multiple scripts with the `defer` attribute, the script which is listed first has access to the script lsted second, but not visa versa.

Different javascript libraries can have different variables and methods uncluded with them in order to achieve different results within each libraries main functions

We use functional programming when we need to have a fixed set of things and need to incrementally add more operations to it.

We use OOP when we have a fixed set of OPERATIONS and we need to create more isntances based on those operations.

We (for this project) are going to store our data in classes, one parent App class, then two child classes for running and for cycling.

Since we are creating data pockets for `App`, we use classes. The general `App` class will contain data/variables/methods that the entire application and both the running and the cycling classes will need to inherit in order for proper page function.

We have created all of these methods, based on our flowchart design. Now we will structure all of the code that we have written into classes that match their respective needs. The 'App' class is going to be the parent class, which contains all of the methods and properties that we will need to have access to on all other objects created under this scope.

THE CONSTRUCTOR METHOD IS IMMEDIATELY CALLED WHEN AN OBJECT IS INSTANTIATED FROM ANY CLASS!!!!!!!------ USE THIS!!

We place our code, such as event handlers, and the required functions needed to load the page into the constructor function of our App class. This way it's encapsulated from the global context but still is called right as the page loads, since the constructor function of any class will be called on page load.

We also put our _getPosition(); function inside of the App class constructor function because that's our function that will get the navigator.geolocation.getCurrentPosition(this._loadMap.bind(this)) which then as a callback function calls the this._loadMap.bind(this) function which actually loads the map. So this is a very imperative, if not the most imperative part for this and many pages alike to work correctly.

The .this keyword within an event handler function is the HTML element in which the event handler is attached to.

Many times in javascript programming, when using event handlers inside classes, you will need to manually .bind() the .this keyword.

We create the Workout class and add our properties and methods in the constructor function that we would like to pass along to the child classes and objects created with this class. Above of the constructor function, we define variables that we would only like the parent class to contain. THESE ARE PUBLIC FIELDS THAT ARE DEFINED WITHIN THE CLASS!

We in this case use the new Date(); constructor to make a string out of the date in order to slice it and grab the last 10 digits to act as a uniqie ID for any given account.

We place all functions that are imperative to the pages functionality but not to any other type of action in private classes or private field in order to protect them from being manually overtwritten.

We use a flowhcart to delegate WHAT we want to implement into our project.

We use an achitecture structure to delegate HOW we are going to implement certain functions within out javascript code

We use a guard clause here in this case for our form validation. We are saying, IF(value doesn't meet expectations) then return an error to the UI and user.

When using a lot of test conditions, make sure to use helper functions in order to refacture code and simplify reading.

Once the user submits the input field data from the form, we created an empty array called #workouts within our App class that we then push these values to once the validation has been completed.

In order to move the map to the clicked location, we will use event delegation by attaching an event handler to the parent container and use the e.target.closest(`.workout`) in order to tell JS that we want to find the closest parent element with the class of `.workout`. We add a guard clause to say if there is no workout to return, to avoid a null return to the console.

In order to actually move the map, we use the built-in leaflet method of setView()

In order to render the workoutform on the left hand side, we grab our html code structure from the HTML sourcecode and insert that via the insertAdjacentHTML() method. 

Local data storage is data that will store with the page and therefore remain intact even when the page is reloaded. LocalStorage is an API within the broswer that we can utilize to store our data.

We put most of our functions inside of one loarger functions that will delegate each action individually but also keep this data out of the GEC.

We call the localStorage property and use the setItem() method. We pass in our key `workout` as the first parameter. The second parameter is a string that we want to associate with this localStorage.

We use the `JSON.stringify()` in order to pass in an object and turn any object into a string, which is what this method does for us.

The localstorage API is a very simple API, therefore it cannot take or remember too much data or information. It should only be used with small applications and small amounts of data.

In order to retrieve this saved localStorage data, we use the JSON.parse(localStorage.getItem(`workouts`)). This takes this string of data and converts it to each individual objects for easier using and application.

We use the .forEach() on the #workouts array to loop over them and call the #renderWorkout(work) on each item within the array, therefore displaying the original workout back in the form on the left hand side. We place this functionality inside of the #loadMap() function because trying to place the markers right as the page loads but before the map loads doesn't work. So therefore, we need to place the #renderWorkoutMarker() inside the #loadMap() funtionality, therefore when we load the page, we first wait for the #laodMap() function to be called, only then do we call the #renderWorkoutMarker() function to display the workout markers on the map.

When we store objects into local storage, they are first parsed into strings with the JSON.stringify() method. Once we try and retrieve these items and they are parsed back into objects with the JSON.parse(). They no longer exist in the prototype chain, so any methods and properties we previously had connected to these objects will no longer work and be able to be utilized.  
*/
